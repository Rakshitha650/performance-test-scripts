<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables_QA" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="thinktime" elementType="Argument">
            <stringProp name="Argument.name">thinktime</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="response_folder" elementType="Argument">
            <stringProp name="Argument.name">response_folder</stringProp>
            <stringProp name="Argument.value">C:\MOSIP_PT\Scripts\Resident\Responses\June24</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data_path" elementType="Argument">
            <stringProp name="Argument.name">data_path</stringProp>
            <stringProp name="Argument.value">C:\MOSIP_PT\Scripts\Resident\Data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="result_path" elementType="Argument">
            <stringProp name="Argument.name">result_path</stringProp>
            <stringProp name="Argument.value">C:\MOSIP_PT\Scripts\Resident\Results\Auth\June17</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth_types" elementType="Argument">
            <stringProp name="Argument.name">auth_types</stringProp>
            <stringProp name="Argument.value">demo,bio-Finger,bio-Iris,bio-FACE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="authorization" elementType="Argument">
            <stringProp name="Argument.name">authorization</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ0dlA4TUlwZ08zS1hrNzBMa3R4b0w2NGZCWTUwcEpDV1Q1UF80WHo4X00wIn0.eyJqdGkiOiJhNTVjMzE0Yi01YWRkLTQwNDgtOTAzYS1iZTQxMDRmNWVkZTAiLCJleHAiOjE1OTU2MjkwNjUsIm5iZiI6MCwiaWF0IjoxNTk1NTkzMDY1LCJpc3MiOiJodHRwczovL3ByZXByb2QubW9zaXAubmV0L2tleWNsb2FrL2F1dGgvcmVhbG1zL21vc2lwIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImQ0YTgyNWFhLWMwNGQtNDI1NS04ZjQ1LWUwNTg2MjYwNTgzMSIsInR5cCI6IkJlYXJlciIsImF6cCI6Im1vc2lwLXJlZ3Byb2MtY2xpZW50IiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiZTVjNmE3ZmItNjI3MS00ZTQzLTk1ODAtZTBkYWQ4Y2E0NjUyIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJSRUdJU1RSQVRJT05fUFJPQ0VTU09SIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfSwibW9zaXAtcmVncHJvYy1jbGllbnQiOnsicm9sZXMiOlsidW1hX3Byb3RlY3Rpb24iXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJjbGllbnRIb3N0IjoiMTAuMjQ0LjUuMTgiLCJjbGllbnRJZCI6Im1vc2lwLXJlZ3Byb2MtY2xpZW50IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJzZXJ2aWNlLWFjY291bnQtbW9zaXAtcmVncHJvYy1jbGllbnQiLCJjbGllbnRBZGRyZXNzIjoiMTAuMjQ0LjUuMTgifQ.o5gs4AYu_8LK54wIsbDKajlsSyVN2n55_XkjnEBozLFRCfm6yuqYv2mS9FeW6GArtGVavgqX0Bc7Gg49q1YCvpIoCj647yRDMFvsioFcPv_N_qMaT0xhw8nrdbShrgE8T6JjQ0DnkhmXlLwODHqIrWRz-nsThpR8Y4u9keVSfQAlv1kMcc4fuujKF3-dSi7JgTBX02ry8I2xYsuSq1M2FICGAqju_QCzm5PTyT1JeqRzQNsczwoCXTx8KURMW9ltBjzrlYpMX3ST6gjuDi_qir-14XvbqOSZmRd7Tle82Hq1Zsmk8Wx2TjXRPBfunKPrQ5hqBzrnGn6moCLNWdSZfA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Origin" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">https://${BASE_URL}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="server_data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">C:/MOSIP_PT/Scripts/IDA/Data/qa_server_data.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">BASE_URL,db_host,db_port,db_name,db_user,db_password,auth_partner_id,misp_lk,partnerID,PartnerApiKey,license_key</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${data_path}\uin_vid_list.txt</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">uin,vid</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Document Encrypted Value" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:\MOSIP_PT\Scripts\IdRepo\id_documents.txt</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">document_enc_value</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Auth 1 request - QA_resident" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="residents-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users reader" enabled="false">
          <stringProp name="filename">${data_path}/usernames_1.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_qa_25June.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="six_digit_number generator" enabled="false">
          <stringProp name="CounterConfig.start">100001</stringProp>
          <stringProp name="CounterConfig.end">499002</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">six_digit_number</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_ida_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ida_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-ida-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;ida&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_idrepo_retrieve_identity" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="idrepo_retrieve_identity" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">idrepository/v1/identity/uin/${uin}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullName_lang" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullName_lang</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.fullName[0].language</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">fullName_lang_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullName_value" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullName_value</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.fullName[0].value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">fullName_value_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="date_of_birth" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">date_of_birth</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.dateOfBirth</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">date_of_birth_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="addressLine1 Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">addressLine1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.addressLine1</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">addressLine1_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="addressLine2 Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">addressLine2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.addressLine2</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">addressLine2_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="addressLine3 Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">addressLine3</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.addressLine3</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">addressLine3_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="city Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">city</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.city</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">city_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="province Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">province</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.province</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">province_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="region Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">region</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.region</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">region_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="localAdministrativeAuthority Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">localAdministrativeAuthority</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.identity.localAdministrativeAuthority</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">localAdministrativeAuthority_not-found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_generate_new_vid" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_new_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.vid&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp}&quot;,&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;vidType&quot;: &quot;TEMPORARY&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/vid</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.vid</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="VID Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.vid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">vid_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp_revoke_vid" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_revoke_vid" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_revoke_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.vidstatus&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp_revoke}&quot;,&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;vidStatus&quot;: &quot;REVOKED&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/vid/${vid}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_revoke&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp_auth-history" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_history" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_history" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authhistory&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${request_time}Z&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_history}&quot;,&#xd;
  &quot;pageStart&quot;: &quot;1&quot;,&#xd;
   &quot;pageFetch&quot;: &quot;1&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-history</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

//System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
//System.out.println(otp);
vars.put(&quot;otp_auth_history&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Calendar now = Calendar.getInstance();
now.add(Calendar.MINUTE,-2);
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
System.out.println(strDate);
vars.put(&quot;request_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_history" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_history" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authhistory&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp_auth_history}&quot;,&#xd;
    &quot;pageStart&quot;: &quot;1&quot;,&#xd;
    &quot;pageFetch&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-history</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_auth_history&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_new_vid" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_new_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp.internal&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin_address}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resident/v1/uin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="residents-generate-VID-debug" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_preprod_June26.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.transactionID</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_generate_new_vid" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_new_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.vid&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp}&quot;,&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;vidType&quot;: &quot;TEMPORARY&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/vid</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.vid</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="VID Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vid_generated</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.vid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">vid_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.io.*;

String basepath = vars.get(&quot;data_path&quot;);
String uin = vars.get(&quot;uin&quot;);
String vid = vars.get(&quot;vid_generated&quot;);
File file = new File(basepath+&quot;\\generated_vid_list.txt&quot;);
FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(uin+&quot;,&quot;+vid+&quot;\r\n&quot;);
bw.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="residents-generate-VID-main" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1921483742">
            <stringProp name="50">2</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1572771">3600</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="295641596">
            <stringProp name="50">2</stringProp>
            <stringProp name="54391">700</stringProp>
            <stringProp name="53">5</stringProp>
            <stringProp name="1568927">3200</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="-1902913932">
            <stringProp name="49">1</stringProp>
            <stringProp name="1510306">1300</stringProp>
            <stringProp name="54">6</stringProp>
            <stringProp name="1544902">2800</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_preprod_June26.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.transactionID</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_generate_new_vid" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_new_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.vid&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp}&quot;,&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;vidType&quot;: &quot;TEMPORARY&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/vid</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.vid</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="VID Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vid_generated</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.vid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">vid_not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.io.*;

String basepath = vars.get(&quot;data_path&quot;);
String uin = vars.get(&quot;uin&quot;);
String vid = vars.get(&quot;vid_generated&quot;);
File file = new File(basepath+&quot;\\generated_vid_list_30June.txt&quot;);
FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(uin+&quot;,&quot;+vid+&quot;\r\n&quot;);
bw.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="residents-revoke-VID-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\generated_vid_list_29June.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="idAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_revoke_vid" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_revoke_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.vidstatus&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp_revoke}&quot;,&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;vidStatus&quot;: &quot;REVOKED&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/vid/${vid}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_revoke&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="residents-auth-history-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_qa_July2.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp_auth-history" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_history" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_history" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authhistory&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp_auth_history}&quot;,&#xd;
    &quot;pageStart&quot;: &quot;1&quot;,&#xd;
    &quot;pageFetch&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-history</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_auth_history&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="resident_auth-lock-unlock-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users reader" enabled="false">
          <stringProp name="filename">${data_path}/usernames_1.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_qa_25June.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_history" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_history" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authhistory&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${request_time}Z&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_history}&quot;,&#xd;
  &quot;pageStart&quot;: &quot;1&quot;,&#xd;
   &quot;pageFetch&quot;: &quot;1&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-history</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

//System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
//System.out.println(otp);
vars.put(&quot;otp_auth_history&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Calendar now = Calendar.getInstance();
now.add(Calendar.MINUTE,-2);
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
System.out.println(strDate);
vars.put(&quot;request_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_lock" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_lock" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authlock&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_lock}&quot;,&#xd;
  &quot;authType&quot;: [&quot;${auth_type_to_lock}&quot;]&#xd;
  },  &#xd;
  &quot;requesttime&quot;: &quot;${auth_lock_time}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;  &#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-lock</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_auth_lock&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Calendar now = Calendar.getInstance();
now.add(Calendar.MINUTE,-5);
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_lock_time&quot;,strDate);

vars.put(&quot;auth_type_to_lock&quot;,vars.get(&quot;auth_types&quot;).split(&quot;,&quot;)[new Random().nextInt(vars.get(&quot;auth_types&quot;).split(&quot;,&quot;).length-1)]);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_unlock" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_unlock" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authunlock&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;,&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_unlock}&quot;,&#xd;
  &quot;authType&quot;: [&quot;${auth_type_to_lock}&quot;]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-unlock</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_auth_unlock&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);

//vars.put(&quot;auth_type&quot;,vars.get(&quot;auth_types&quot;).split(&quot;,&quot;)[new Random().nextInt(vars.get(&quot;auth_types&quot;).split(&quot;,&quot;).length-1)]);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_new_vid" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_new_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp.internal&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin_address}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resident/v1/uin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="resident_auth-lock-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users reader" enabled="false">
          <stringProp name="filename">${data_path}/usernames_1.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_qa_25June.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_history" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_history" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authhistory&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${request_time}Z&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_history}&quot;,&#xd;
  &quot;pageStart&quot;: &quot;1&quot;,&#xd;
   &quot;pageFetch&quot;: &quot;1&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-history</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

//System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
//System.out.println(otp);
vars.put(&quot;otp_auth_history&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Calendar now = Calendar.getInstance();
now.add(Calendar.MINUTE,-2);
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
System.out.println(strDate);
vars.put(&quot;request_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_lock" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_lock" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authlock&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_lock}&quot;,&#xd;
  &quot;authType&quot;: [&quot;${auth_type_to_lock}&quot;]&#xd;
  },  &#xd;
  &quot;requesttime&quot;: &quot;${auth_lock_time}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;  &#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-lock</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_auth_lock&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Calendar now = Calendar.getInstance();
now.add(Calendar.MINUTE,-5);
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_lock_time&quot;,strDate);

vars.put(&quot;auth_type_to_lock&quot;,vars.get(&quot;auth_types&quot;).split(&quot;,&quot;)[new Random().nextInt(vars.get(&quot;auth_types&quot;).split(&quot;,&quot;).length-1)]);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.io.*;

String basepath = vars.get(&quot;data_path&quot;);
String uin = vars.get(&quot;uin&quot;);
String auth_type_to_lock = vars.get(&quot;auth_type_to_lock&quot;);
File file = new File(basepath+&quot;\\auth_locked_uins_list.txt&quot;);
FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(uin+&quot;,&quot;+auth_type_to_lock+&quot;\r\n&quot;);
bw.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="resident_auth-unlock-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users reader" enabled="false">
          <stringProp name="filename">${data_path}/usernames_1.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="locked uin Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\auth_locked_uins_list.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,auth_type_to_unlock</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_auth_unlock" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_auth_unlock" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.authunlock&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;,&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;request&quot;: {&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otp&quot;: &quot;${otp_auth_unlock}&quot;,&#xd;
  &quot;authType&quot;: [&quot;${auth_type_to_unlock}&quot;]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/auth-unlock</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_auth_unlock&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);

//vars.put(&quot;auth_type&quot;,vars.get(&quot;auth_types&quot;).split(&quot;,&quot;)[new Random().nextInt(vars.get(&quot;auth_types&quot;).split(&quot;,&quot;).length-1)]);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_new_vid" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_new_vid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp.internal&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${uin_address}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;UIN&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resident/v1/uin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="residents-euin-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_qa_July2.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_euin" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_euin" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.euin&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
    &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
    &quot;cardType&quot;: &quot;MASKED_UIN&quot;,&#xd;
    &quot;otp&quot;: &quot;${otp_euin}&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/req/euin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_euin&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="79058">PDF</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="residents-RID-status-debug" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="uin vid Reader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${data_path}\uin_vid_list_qa_25June.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">uin,vid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="txnID Counter" enabled="true">
          <stringProp name="CounterConfig.start">1000234565</stringProp>
          <stringProp name="CounterConfig.end">5123023456</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">transactionID</stringProp>
          <stringProp name="CounterConfig.format">0000000000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_authenticate_secretKey" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_authenticate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;mosip-resident-client&quot;,&#xd;
    &quot;secretKey&quot;: &quot;abc123&quot;,&#xd;
    &quot;appId&quot;: &quot;resident&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.HOUR, -6);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;Z&quot;;
vars.put(&quot;timestamp&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/idrepo_authentication</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">authorization</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: Authorization=([\w.-]+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorization_not_found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_IdAuth_generate_otp" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TR_IdAuth_generate_otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.identity.otp&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;,&#xd;
  &quot;requestTime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;transactionID&quot;: &quot;${transactionID}&quot;,&#xd;
  &quot;individualId&quot;: &quot;${vid}&quot;,&#xd;
  &quot;individualIdType&quot;: &quot;VID&quot;,&#xd;
  &quot;otpChannel&quot;: [&#xd;
    &quot;EMAIL&quot;,&#xd;
    &quot;PHONE&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">idauthentication/v1/otp/${misp_lk}/${partnerID}/${PartnerApiKey}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.response.status</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.io.*;

String timestamp = &quot;&quot;;
String timestampFormat = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;;
Date currDate = new Date();
Calendar cal = Calendar.getInstance();
cal.setTime(currDate);
cal.add(Calendar.MINUTE, 330);
Date date = cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(timestampFormat);
timestamp = sdf.format(date);
// System.out.println(timestamp);
timestamp = timestamp + &quot;+05:30&quot;;
vars.put(&quot;timestamp1&quot;,timestamp);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR_resident_checkstatus" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resident_checkstatus" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;mosip.resident.checkstatus&quot;,&#xd;
  &quot;request&quot;: {&#xd;
    &quot;individualId&quot;: &quot;${uin}&quot;,&#xd;
    &quot;individualIdType&quot;: &quot;UIN&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;v1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">resident/v1/rid/check-status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">Authorization=${authorization}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${response_folder}/Errors/retrieve_identity</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.response.message</stringProp>
              <stringProp name="EXPECTED_VALUE">Notification.*</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">${thinktime}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

String db_host = vars.get(&quot;db_host&quot;);
String db_name = vars.get(&quot;db_name&quot;);
String db_port =  vars.get(&quot;db_port&quot;);
String db_user = vars.get(&quot;db_user&quot;);
String db_pwd = vars.get(&quot;db_password&quot;);
//String db_pwd = &quot;postgres&quot;;
String filter = vars.get(&quot;uin&quot;);
String query = &quot;SELECT otp FROM kernel.otp_transaction where id like &apos;%&quot;+filter+&quot;%&apos; ORDER BY generated_dtimes DESC LIMIT 1&quot;;
System.out.println(query);
System.out.println(db_user+&quot; &quot;+db_pwd);
String db_conn_url = &quot;jdbc:postgresql://&quot; + db_host + &quot;:&quot; + db_port + &quot;/&quot; + db_name;
System.out.println(db_conn_url);

Connection connection = DriverManager.getConnection(db_conn_url, db_user, db_pwd);
//System.out.println(&quot;Java JDBC PostgreSQL Example&quot;);

System.out.println(&quot;Connected to PostgreSQL database!&quot;);
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
String otp = &quot;&quot;;
while (resultSet.next()) {
otp = resultSet.getString(1);
}
System.out.println(otp);
vars.put(&quot;otp_euin&quot;,otp);

String format = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS+05:30&quot;;
Calendar now = Calendar.getInstance();
Date date = now.getTime();
SimpleDateFormat dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
String strDate = dateFormat.format(date);
vars.put(&quot;auth_enc_time&quot;,strDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${thinktime}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${result_path}/vid-revoke_2users_run_dummy.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">mosip</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Regproc_packet_upload</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value">${__TestPlanName}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        <stringProp name="QUEUE_SIZE">3500</stringProp>
      </BackendListener>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CompositeResultCollector guiclass="kg.apc.jmeter.vizualizers.CompositeGraphGui" testclass="kg.apc.jmeter.vizualizers.CompositeResultCollector" testname="jp@gc - Composite Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="COMPOSITE_CFG">
          <collectionProp name="">
            <stringProp name="245914917">jp@gc - Active Threads Over Time</stringProp>
            <stringProp name="-243013315">jp@gc - Response Times Over Time</stringProp>
            <stringProp name="-243013315">jp@gc - Response Times Over Time</stringProp>
          </collectionProp>
          <collectionProp name="">
            <stringProp name="2133254370">Overall Active Threads</stringProp>
            <stringProp name="1337226896">TR_ida_otp_authenticate-uin</stringProp>
            <stringProp name="-611204113">ida_otp_authenticate-uin</stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.vizualizers.CompositeResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
