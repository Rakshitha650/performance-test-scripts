name: Deploy AWS EC2 with Terraform and Install Software

on:
  workflow_dispatch:
    inputs:
      vnc_username:
        description: "Enter VNC Username"
        required: true
      vnc_password:
        description: "Enter VNC Password"
        required: true
        type: string

env:
  TF_VAR_VNC_USERNAME: ${{inputs.vnc_username}}
  TF_VAR_VNC_PASSWORD: ${{inputs.vnc_password}}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy EC2 Instance and Install Software
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Plan Terraform
        run: terraform plan
        working-directory: terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false -no-color -auto-approve
        continue-on-error: true

      - name: Add the Terraform plan file / *.tfstate files / terraform format changes
        run: |
            git add -A
            git status
            git config --global user.email ${{ github.actor }}@users.noreply.github.com
            git config --global user.name ${{ github.actor }}
            git commit -s -am "Terraform files GitHub Actions"
            git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: always()

      - name: Terraform plan / apply status
        if: ${{ steps.plan.outcome == 'failure' || steps.apply.outcome == 'failure' }}
        run: exit 1

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,author,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: "${{ github.event_name != 'pull_request' && failure() }}" # Pick up events even if the job fails or is canceled.
